#!/usr/local/bin/perl
use strict; use warnings;
use File::Copy;
############################
# ANONI - anoni jail populate
############################
my ($usb, $node) = @ARGV;
die "ARG1 /USB ARG2 HOSTNAME\n" unless (defined $node);
$usb =~ s%/\z%%;
############################
my $limit = 1000;
my $shell = '/bin/csh';
############################
my @list = 1..$limit;
my @clan;
############################
mkdir("/root/clan");
cr_clan();
cr_home($_) for (@list);
cr_usr($_) for (@list);
cr_key($_, $node) for (@list);
`chown :norm /HIVE/FEED/norm`;
############################
sub cr_clan
{
	my @clan = qw(norm heir);
	`pw groupadd $_` for (@clan);
}
sub clan
{
	my $clan = 'norm';
	my $rnum = `jot -r 1 0 16`;
	$clan = 'heir' if ($rnum == 0);
	return $clan;	
}
sub cr_home
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	my $ssh = "$home.ssh";
	`mkdir $home`;
############################
	mkdir("$ssh");
	`cp $usb/KERN/conf/.vimrc $home`;
	`chown -R $usr $ssh`;
	`chmod -R 700 $ssh`;
############################
	`cp $usb/KERN/conf/.cshrc $home`;
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	`chmod -R 700 $home`;
	`chown -R $usr $home`;
	
	my $clan = clan();
	`pw usermod -n $usr -G $clan`;
	`echo '$usr' >> /root/clan/$clan`; 
	print "$usr created\n";
############################
	`chmod -R 700 $home.ssh`;
}
############################
sub cr_key
{
	my ($usr, $node) = @_;
############################
	my $idump = $usb."/BANK/host/$node/$usr";
	my $key = "/home/$usr/.ssh/id_rsa";
	my $remote = $key.'.pub';
	`mkdir -p $idump`;
############################
	my @pass = neopass();
############################
	`ssh-keygen -q -N "$pass[0]" -t rsa -b 2048 -f $key`;
############################
	copy($key, "$idump/id_rsa");
	copy($remote, "$idump/known_hosts");
	move($remote, "/home/$usr/.ssh/authorized_keys");
	`echo "$pass[1]" > $idump/p`;
	#`chmod -R 500 /home/$usr/.ssh/`;
	print "$key created\n";
}
sub neopass
{
	my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
	my @pass;
	my $cnt2 = 0;
	while ($cnt2 < 4)
	{
		my @set = `jot -r 5 0 26`;
		chomp @set;
		for (@set)
		{
			no warnings 'uninitialized';	
			$pass[0] .= $p[$_];
			$pass[1] .= $p[$_];
		}
		$cnt2++;
		$pass[1] .= ' ';
	}
############################
	chop $pass[1];
	return @pass;
}
