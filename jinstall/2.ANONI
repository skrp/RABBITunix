#!/usr/local/bin/perl
use strict; use warnings;
use File::Copy;
############################
# ANONI - anoni jail populate
############################
# better clan assignment
############################
my ($usb, $node) = @ARGV;
die "ARG1 /USB ARG2 HOSTNAME\n" unless (defined $node);
$usb =~ s%/\z%%;
############################
my $limit = 10;
my $shell = '/bin/csh';
############################
my @list = 1..$limit;
my @clan;
############################
mkdir("/root/clan");
cr_clan();
cr_home($_) for (@list);
cr_usr($_) for (@list);
cr_key($_) for (@list);
############################
#`zfs set userquota=20MB`;
############################
sub cr_home
{
	my ($usr) = @_;
############################
	my $home = "/home/$usr/";
	`mkdir $home`;
############################
	my $ssh = $home.'.ssh/';
	my $auth = $usb.'/BANK/authorized_keys';
	my $nauth = $ssh.'authorized_keys';

	mkdir("$ssh");
	copy($auth, $ssh); 

	`chown -R $usr $ssh`;
############################
	`cp $usb/KERN/conf/.cshrc $home`;
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	`chmod -R 700 $home`;
	`chown -R $usr $home`;
	
	my $clan = clan();
	`pw usermod $usr -G $clan`;
	`echo '$usr' >> /root/clan/$clan`; 
	print "$usr created\n";
}
############################
sub cr_key
{
	my ($usr) = @_;
############################
	my $dump = $usb."/BANK/host/$node/$usr";
	my $key = "/home/$usr/.ssh/id_rsa";
	my $remote = $key.'.pub';
	`mkdir -p $dump`;
############################
	my $pass;
	my $cnt = 0;
	while ($cnt < 5)
	{
		my $in = int(rand(1000));
		$pass .= " $in";
		$cnt++;
	}
############################
	`ssh-keygen -q -N "$pass" -t rsa -b 2048 -f $key`;
############################
	copy($remote, "$dump/id_rsa.pub");
	`echo "$pass" > $dump/p`;
############################
	print "$key created\n";
}
############################
sub cr_clan
{
	my @c = qw(clan anoni world heir pf zfs usb hive mod rabbit idx scp txn frep init nrep reg);
############################
	push(@clan, $_) for (@c);
	push(@clan, "x$_") for (@c);
############################
	`pw groupadd $_` for (@clan);
############################
}
sub clan
{
	my $clan = $clan[rand @clan];
	return $clan;	
}
############################
sub neopass
{
	my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
	my @set = `jot -r 5 0 27`;
	my $pass;
############################
	my $cnt2 = 0;
	while ($cnt2 < 5)
	{
		$pass .= ' ' unless ($cnt2 == 0); 
		my @set = `jot -r 5 0 27`;
		$pass.=$p[$_] for (@set);
		$cnt2++;
	}
############################
	return $pass;
}
############################
