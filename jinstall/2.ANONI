#!/usr/local/bin/perl
use strict; use warnings;
use File::Copy;
############################
# ANONI - anoni jail populate
############################
my ($usb, $node) = @ARGV;
die "ARG1 /USB ARG2 HOSTNAME\n" unless (defined $node);
$usb =~ s%/\z%%;
# GLOBAL ###################
my $shell = '/bin/csh';
my $limit = 100;
my @list = 1..$limit;
# PASSBUTTONS ##############
my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
############################
my @grp = qw(norm prince princess);
`pw groupadd $_` for (@grp);
mkdir("/root/grp");
my ($nfh, $pfh, $psfh) = g_list();
mkdir("$usb/BANK/host/$node/$_/") for @grp;
############################
cr_home($_) for (@list);
cr_usr($_) for (@list);
close $nfh; close $pfh; close $psfh;
cr_key($node);
`chown :norm /HIVE/FEED/norm`;
############################
sub g_list
{
	 open(my $nfh, '>>', "/root/grp/norm");
	 open(my $pfh, '>>', "/root/grp/prince");
	 open(my $psfh, '>>', "/root/grp/princess");
	 return ($nfh, $pfh, $psfh);
}
############################
sub grp
{
	my $grp = 'norm';
	my $rnum = `jot -r 1 0 16`;
	$grp = 'prince' if ($rnum == 1);
	$grp = 'princess' if ($rnum == 0);
	return $grp;	
}
sub cr_home
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	my $ssh = "$home.ssh";
	my $udir = $home.'usb';
############################
	mkdir("$home");
	mkdir("$ssh");
	mkdir("$udir");
#	$usb/KERN/conf/.vimrc $home`;
############################
	copy("$usb/KERN/conf/.cshrc","$home");
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	
	my $grp = grp();
	`pw usermod -n $usr -G wheel` if ($grp eq 'prince');
	`pw usermod -n $usr -G $grp`;
	if ($grp eq 'norm')
		{ print $nfh "$usr\n"; }
	elsif ($grp eq 'prince')
		{ print $pfh "$usr\n"; }
	elsif ($grp eq 'princess')
		{ print $psfh "$usr\n"; }
	else 
		{ print "FAIL $grp\n"; }
	print "$usr created\n";
############################
}
############################
sub cr_key
{
	my ($node) = shift;
############################
############################
	for (@grp)	
	{
		my $i_grp = $_;
		my $g_file = "/root/grp/$i_grp";
		open(my $gfh, '<', $g_file);
		my @i_u = readline $gfh;
		close $gfh; chomp @i_u;

		for (@i_u)
		{
			my $i_usr = $_;
			my $idump = "$usb/BANK/host/$node/$i_grp/$i_usr";
			my $key = "/home/$i_usr/.ssh/id_rsa";
			my $pub = $key.'.pub';
			mkdir("$idump");
############################
			if ($i_grp eq 'norm')	
			{	
				`ssh-keygen -q -N "" -t rsa -b 2048 -f $key`;
				copy($key, "$idump/id_rsa");
				copy($pub, "$idump/known_hosts");
				move($pub, "/home/$i_usr/.ssh/authorized_keys");
			}
############################
			elsif ($i_grp eq 'prince' || $i_grp eq 'princess')	
			{
				my @pass = neopass();
				`ssh-keygen -q -N "$pass[0]" -t rsa -b 2048 -f $key`;
				copy($key, "$idump/id_rsa");
				copy($pub, "$idump/known_hosts");
				move($pub, "/home/$i_usr/.ssh/authorized_keys");
				`echo "$pass[1]" > $idump/p`;
			}
			else 
				{ print "FAIL $i_grp\n"; }	
# PERMISSION ###############
			`chown -R $i_usr /home/$i_usr`;
			`chmod -R 700 /home/$i_usr`;
			print "$key created\n";
		}
	}
}
sub neopass
{
	my @pass;
	my $cnt2 = 0;
	while ($cnt2 < 4)
	{
		my @set = `jot -r 5 0 26`;
		chomp @set;
		for (@set)
		{
			no warnings 'uninitialized';	
			$pass[0] .= $p[$_];
			$pass[1] .= $p[$_];
		}
		$cnt2++;
		$pass[1] .= ' ';
	}
############################
	chop $pass[1];
	return @pass;
}

