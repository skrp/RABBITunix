#!/usr/local/bin/perl
use strict; use warnings;
use File::Copy;
###########################
# WORLD - host buildworld 
###########################
my ($usb, $node) = @ARGV;
die "ARG1 /usb ARG2 node\n" unless (defined $node);
$usb =~ s%/\z%%;
###########################
chdir("$usb/KERN/") or die "FAIL $usb\n";;
`cp $usb/KERN/conf/.cshrc /root/`;
`chown -R root /root/`;
`chmod -R 700 /root/`;
`rm /home`;
###########################
`zfs create zroot/CLAN`;
`zfs create zroot/KRIP`;
`mkdir /CLAN/pool/`;
`mkdir /CLAN/src/`;
`mkdir /CLAN/log/`;
`mkdir /KRIP/norm/`;
`mkdir /KRIP/lord/`;
`chmod 550 /CLAN`;
`chmod 770 /CLAN/pool/`;
`chmod 770 /CLAN/src/`;
`chmod 770 /CLAN/log/`;
`chmod 770 /KRIP/norm/`;
`chmod 770 /KRIP/lord/`;
###########################
`zfs create zroot/usr/ANONI`;
`zfs create zroot/usr/ANONI/home`;
#`zfs create zroot/usr/ANONI/WORLD`;
#`zfs create zroot/usr/ANONI/CNT`;
`zfs create zroot/usr/ANONI/dump`;
`mkdir /usr/ANONI/dump/pool`;
`mkdir /usr/ANONI/dump/g`;
`chmod 333 /usr/ANONI/dump/pool`;
`chmod 333 /usr/ANONI/dump/g`;
###########################
`zfs create zroot/usr/nfs`;
`zfs set sharenfs=on zroot/usr/nfs`;
###########################
`zfs create -o mountpoint=/usr/ANONI/HIVE zroot/HIVE`;
mkdir("/usr/ANONI/HIVE/BIO/");
mkdir("/usr/ANONI/HIVE/TODO/");
mkdir("/usr/ANONI/HIVE/FEED/");
mkdir("/usr/ANONI/HIVE/FEED/norm");
`chmod -R 777 /usr/ANONI/HIVE/FEED/norm`;
`touch /usr/ANONI/HIVE/PING`;
###########################
my (@bin) = glob("bin/*");
chomp @bin;
`cp $_ /bin/` for (@bin);
###########################
`cp ../BANK/pf_net /etc/pf_net`;
#`cp conf/fstab /etc/fstab`;
`cp conf/src.conf /etc/src.conf`;
`cp conf/make.conf /etc/make.conf`;
`cp conf/motd /etc/`;
`cp conf/purgehost /etc/`;
`cp conf/pf.conf /etc/pf.conf`;
`cp conf/ntpd.conf /usr/local/etc/ntpd.conf`;
`cp conf/rc.conf /etc/rc.conf`;
#`cp conf/resolv.conf /etc/resolv.conf`;
`cp conf/sshd_config /etc/ssh/sshd_config`;
#`cp conf/start_if.em0 /etc/start_if.em0`;
#`cp conf/start_if.re0 /etc/start_if.re0`;
`cp conf/ttys /etc/ttys`;
`cp conf/KERN /usr/src/sys/amd64/conf/KERN`;
`cp conf/sysctl.conf /etc/sysctl.conf`;
`cp conf/jail.conf /etc/jail.conf`;
`cp conf/login.conf /etc/login.conf`;
`cp conf/exports /etc/exports`;
###########################
`cp conf/hive /etc/rc.d/`;
`chmod +x /etc/rc.d/hive`;
###########################
`mkdir -p /usr/local/etc/rc.d`;
`cp bin/DEMON_TED /usr/local/etc/rc.d/`;
###########################
my $hn = `hostname`; chomp $hn;
`echo hostname='$hn' >> /etc/rc.conf`;
###########################
`pw userdel toor`;
###########################
open(my $hfh, '<', '/etc/purgehost');	
my @lines = readline $hfh;
close $hfh; chomp @lines;
chdir("/");
`rm -rf $_` for (@lines);
###########################
my $shell = '/bin/csh';
my $home = "/usr/home/con/";
my $cs = "/usr/home/con/.ssh/";
`mkdir $home`;
`mkdir $cs`;
`cp $usb/KERN/conf/.cshrc $home`;
`echo con | pw useradd -h 0 -n con -d $home -s $shell`;
`chmod -R 700 $home`;
`chown -R con $home`;
############################
# HEIR #####################
# rabbit -> con_host -> ANONI_jail -> heir_jail -> rabbit_host -> root 
############################
my @clan = cr_clan();
my $limit = 1000;
my @list = 1..$limit;
mkdir("/root/clan");
############################
cr_home($_) for (@list);
cr_usr($_) for (@list);
cr_key($node);
#cr_key($_, $node) for (@list);
############################
sub cr_home
{
	my ($usr) = @_;
############################
	my $home = "/usr/home/$usr/";
	`mkdir $home`;
############################
	my $ssh = $home.'.ssh/';
	my $auth = $usb.'/BANK/authorized_keys';
	my $nauth = $ssh.'authorized_keys';

	mkdir("$ssh");
	copy($auth, $ssh); 

	`cp $usb/KERN/conf/.vimrc $home`;

	`chown -R $usr $ssh`;
############################
	`cp $usb/KERN/conf/.cshrc $home`;
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/usr/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	`chmod -R 700 $home`;
	`chown -R $usr $home`;
	
	my $clan = clan();
	`pw usermod -n $usr -G $clan`;
	`echo '$usr' >> /root/clan/$clan`; 
	print "$usr created\n";
############################
	`chmod -R 700 $home.ssh`;
}
############################
sub cr_key
{
	my ($node) = @_;
############################
	for (@clan)
	{
		my $iclan = $_;
		open(my $cfh, '<', "/root/clan/$iclan") or next;
		my @ic = readline $cfh;
		close $cfh; chomp @ic;
############################
		for (@ic)
		{
			my $iu = $_;

			my $idump = $usb."/BANK/host/$node/$iclan/$iu";
			my $key = "/usr/home/$iu/.ssh/id_rsa";
			my $pub = $key.'.pub';
############################
			`mkdir -p $idump`;
############################
			my @pass = neopass();
			`ssh-keygen -q -N "$pass[0]" -t rsa -b 2048 -f $key`;
			move($key, "$idump/id_rsa");
			copy($pub, "$idump/known_hosts");
			move($pub, "/usr/home/$iu/.ssh/authorized_keys");
			`echo "$pass[1]" > $idump/p`;
############################
			print "$key created\n";
		}
	}
}
############################
sub cr_clan
{
	my @c = qw(wheel clan rep world pf zfs usb hive src);
############################
	push(@clan, $_) for (@c);
	push(@clan, "x$_") for (@c);
############################
	`pw groupadd $_` for (@clan);
	return @clan;
############################
}
sub clan
{
	my $rnum = `jot -r 1 0 16`;
	my $clan = $clan[$rnum];
	return $clan;	
}
sub neopass
{
	my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
	my @pass;
############################
	my $cnt2 = 0;
	while ($cnt2 < 4)
	{
		my @set = `jot -r 5 0 26`;
		chomp @set;
		for (@set)
		{
			no warnings 'uninitialized';	
			$pass[0] .= $p[$_];
			$pass[1] .= $p[$_];
		}
		$cnt2++;
		$pass[1] .= ' ';
	}
############################
	chop $pass[1];
	return @pass;
}
