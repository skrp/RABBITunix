#!/usr/local/bin/perl
use strict; use warnings;
###########################
# WORLD - buildworld 
###########################
my ($usb) = @ARGV;
die "ARG1 /USB\n" unless (defined $usb);
$usb =~ s%/\z%%;
###########################
chdir("$usb/KERN/") or die "FAIL $usb\n";;
###########################
`zfs create zroot/usr/ANONI`;
`zfs create zroot/usr/ANONI/home`;
###########################
`zfs create zroot/usr/nfs`;
`zfs set sharenfs=on zroot/usr/nfs`;
###########################
`zfs create -o mountpoint=/usr/HIVE zroot/HIVE`;
mkdir("/usr/HIVE/BIO/");
mkdir("/usr/HIVE/TODO/");
mkdir("/usr/HIVE/FEED/");
mkdir("/usr/HIVE/FEED/norm");
`touch /usr/HIVE/PING`;
###########################
my (@bin) = glob("bin/*");
chomp @bin;
`cp $_ /bin/` for (@bin);
###########################
`cp ../BANK/net /etc/pf_net`;
`cp conf/src.conf /etc/src.conf`;
`cp conf/make.conf /etc/make.conf`;
`cp conf/motd /etc/`;
`cp conf/purgehost /etc/`;
`cp conf/pf.conf /etc/pf.conf`;
`cp conf/ntpd.conf /usr/local/etc/ntpd.conf`;
`cp conf/rc.conf /etc/rc.conf`;
#`cp conf/resolv.conf /etc/resolv.conf`;
`cp conf/sshd_config /etc/ssh/sshd_config`;
#`cp conf/start_if.em0 /etc/start_if.em0`;
#`cp conf/start_if.re0 /etc/start_if.re0`;
`cp conf/ttys /etc/ttys`;
`cp conf/KERN /usr/src/sys/amd64/conf/KERN`;
`cp conf/sysctl.conf /etc/sysctl.conf`;
`cp conf/jail.conf /etc/jail.conf`;
`cp conf/login.conf /etc/login.conf`;
`cp conf/exports /etc/exports`;
###########################
my $hn = `hostname`; chomp $hn;
`echo hostname='$hn' >> /etc/rc.conf`;
###########################
print"\nFILES U MUST NOW EDIT: rc.conf  pf.conf resolv.conf jail.conf\n";
###########################
`pw userdel toor`;
###########################
open(my $hfh, '<', '/etc/purgehost');	
my @lines = readline $hfh;
close $hfh; chomp @lines;
chdir("/");
`rm -rf $_` for (@lines);
###########################
my $shell = '/bin/csh';
my $home = "/home/con/";
my $cusb = "/home/con/usb/";
`mkdir $home`;
`mkdir $cusb`;
`cp $usb/KERN/conf/.cshrc $home`;
`echo con | pw useradd -h 0 -n con -d $home -s $shell`;
`chmod -R 700 $home`;
`chown -R con $home`;
#`pw usermod $usr -G $clan`;
############################
# HEIR #####################
# rabbit -> con_host -> ANONI_jail -> heir_jail -> rabbit_host -> root 
############################
my @clan = cr_clan();
my $limit = 20000;
my $shell = '/bin/csh';
my @list = 1..$limit;
mkdir("/root/clan");
############################
cr_home($_) for (@list);
cr_usr($_) for (@list);
cr_key($_) for (@list);
############################
sub cr_home
{
	my ($usr) = @_;
############################
	my $home = "/home/$usr/";
	`mkdir $home`;
############################
	my $ssh = $home.'.ssh/';
	my $auth = $usb.'/BANK/authorized_keys';
	my $nauth = $ssh.'authorized_keys';

	mkdir("$ssh");
	copy($auth, $ssh); 

	`cp $usb/KERN/conf/.vimrc $home`;

	`chown -R $usr $ssh`;
############################
	`cp $usb/KERN/conf/.cshrc $home`;
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	`chmod -R 700 $home`;
	`chown -R $usr $home`;
	
	my $clan = clan();
	`pw usermod $usr -G $clan`;
	`echo '$usr' >> /root/clan/$clan`; 
	print "$usr created\n";
}
############################
sub cr_key
{
	my ($usr) = @_;
############################
	my $dump = $usb."/BANK/host/$node/$usr";
	my $key = "/home/$usr/.ssh/id_rsa";
	my $remote = $key.'.pub';
	`mkdir -p $dump`;
############################
	my $pass;
	my $cnt = 0;
	while ($cnt < 5)
	{
		my $in = int(rand(1000));
		$pass .= " $in";
		$cnt++;
	}
############################
	`ssh-keygen -q -N "$pass" -t rsa -b 2048 -f $key`;
############################
	copy($remote, "$dump/id_rsa.pub");
	`echo "$pass" > $dump/p`;
############################
	print "$key created\n";
}
############################
sub cr_clan
{
	my @c = qw(wheel clan rep world pf zfs usb hive src);
############################
	push(@clan, $_) for (@c);
	push(@clan, "x$_") for (@c);
############################
	`pw groupadd $_` for (@clan);
	return @clan;
############################
}
sub clan
{
	my $rnum = `jot -r 1 0 16`;
	my $clan = $clan[$rnum];
	return $clan;	
}
############################
sub neopass
{
	my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
	my @set = `jot -r 5 0 27`;
	my $pass;
############################
	my $cnt2 = 0;
	while ($cnt2 < 5)
	{
		$pass .= ' ' unless ($cnt2 == 0); 
		my @set = `jot -r 5 0 27`;
		$pass.=$p[$_] for (@set);
		$cnt2++;
	}
############################
	return $pass;
}
