#!/usr/local/bin/perl
use strict; use warnings;
use POSIX;
##############################
# TED - console $KEY shift
##############################
my $ted = "/usr/ANONI/HIVE/FEED/norm/ted";
##############################
my $OP = 0;
$SIG{INT} = \&act;
##############################
my $ROOT = '/usr/ANONI/HIVE/';
my $PING = $ROOT.'PING';
# BIRTH ######################
die "FAIL STILLBORN $!\n" unless (daemon() == 0);
# GLOBAL #####################
my $NAME = name();
# /HIVE/
my $BIO = $ROOT.'BIO/'.$NAME;
my $BIOYAY = $ROOT.'BIO/'.$NAME.'_YAY';
my $BIOFAIL = $ROOT.'BIO/'.$NAME.'_FAIL';
my $FEED = $ROOT.'FEED/';
my $TODO = $ROOT.'TODO/';
# attributes
my $BIRTH = age();
my $SLEEP = $TODO.'_SLEEP';
my $RATE = 100;
my $YAY = 0;
my $FAIL = 0;
# LOG ########################
my ($Lfh, $Yfh, $Ffh); 
open($Lfh, '>>', $BIO);
open($Yfh, '>>', $BIOYAY);
open($Ffh, '>>', $BIOFAIL);
$Lfh->autoflush(1);
$Yfh->autoflush(1);
$Ffh->autoflush(1);
# PREP #######################
printf $Lfh ("HELLOWORLD %s\n", TIME());
ping();
die "FAIL write BIO $!\n" unless (-w $BIO);
die "FAIL write PING $!\n" unless (-w $PING);
die "FAIL write FEED $!\n" unless (-w $FEED);
die "FAIL write PING $!\n" unless (-w $PING);
# LIVE #######################
while (1)
{
	sleep 600;
	sleep 1200 if (act() == 1);
# SLEEP ######################
	if (-e $SLEEP)
	{
			my @QUE; $QUE[0]='ted';
			tombstone($YAY, $FAIL);
			SLEEP($YAY, $FAIL, @QUE);
	}
}
# CORE #######################
sub name
{
	my $id = int(rand(999));
	my $name = $$.'_'.$id;
	return $name;
}
sub tombstone
{
	my ($cnt, $ttl) = @_;
	my ($tTIME, $nTIME, $life);
	$tTIME = age();
	$nTIME = TIME();
	$life = "$BIRTH $tTIME";
	print $Lfh "$nTIME demon: $NAME age: $life yay: $YAY fail: $FAIL\n";
}
sub ping
{
	my ($Pfh, $curTIME);
	open($Pfh, '>>', $PING);
	$curTIME = TIME();
	print $Pfh "$curTIME $$\n";
	close $Pfh;
}
sub age
{
	my $age = localtime();
	$age =~ s%..........20..%%;
	$age =~ s%^....%%;
	$age =~ s% %_%;
}
sub TIME
{
	my ($t, $mon, $day, $hour, $time);
	$t = localtime();
	$mon = (split(/\s+/, $t))[1];
	$day = (split(/\s+/, $t))[2];
	$hour = (split(/\s+/, $t))[3];
	$time = $mon.'_'.$day.'_'.$hour;
	return $time;
}
sub daemon
{
	die "FAIL fork 1 $!\n" if ((my $pid = POSIX::fork()) < 0);
	if ($pid != 0)
		{ exit(0); }
	POSIX::setsid() or die "FAIL setsid $!\n";
	die "FAIL fork 2 $!\n" if ((my $pid2 = POSIX::fork()) < 0);
	if ($pid2 != 0)
		{ exit(0); }
	die "FAIL chdir tmp $!\n" unless chdir("$ROOT");
	POSIX::umask 0;	
	my $fd = 3;
	do { POSIX::close($fd); $fd++; } while ($fd < 1024);
	my $des = '/dev/null';
	open(STDIN, '<', $des);
	open(STDOUT, '>', $des);
	open(STDERR, '>', $des);
	return 0;
}
sub SLEEP
{
	my ($cnt, $ttl, @QUE) = @_;
	my ($Sfh, $timeout, $curTIME);
	open($Sfh, '<', $SLEEP);
	$timeout = readline $Sfh; chomp $timeout;
	$curTIME = TIME();
	print $Lfh "SLEEP $curTIME $timeout\n";	
	close $Sfh; unlink $SLEEP;
	SUICIDE($cnt, $ttl, @QUE) if ($timeout eq 'SUICIDE');
	tombstone($cnt, $ttl);
	sleep $timeout;
}
sub SUICIDE
{
	my ($cnt, $ttl, @QUE) = @_;
	my $curTIME = TIME();
	print $Lfh "FKTHEWORLD $curTIME\n";
	tombstone($cnt, $ttl);
	que_flush(@QUE);
	move($TODO, $FEED);
	die;
}
sub act
{
	return 1 unless (-f $ted);
	return 1 if ($OP == 1);
	$OP = 1;
	open(my $tfh, '<', $ted);
	my @item = readline $tfh;
	close $tfh; chomp @item;

	unlink $ted;

	my ($usr, $pool, $node, $clan, $cnt) = split(" ", $item[0]);
	my $udir;

	next unless (defined $cnt);

	if ($clan eq 'norm' || $clan eq 'heir')
		{ $udir = "/usr/ANONI/home/$usr"; }
	else
		{ $udir = "/usr/home/$usr"; }

	`/bin/EXP $pool`;
	sleep 120;

	my $dir = "/tmp/$pool/BANK/host/$node/$clan/";
	`/bin/IMP $pool`;
	sleep 120;

	opendir(my $dh, $dir);
	my @dir = readdir $dh;	
	shift @dir; shift @dir;

	while ($cnt > 0) 
	{
		my $KEY = shift @dir;
		my $kdir =  $dir.$KEY;
		`mv $kdir $udir`;
		$cnt--;
	}
	`chmod -R 700 $udir`;
	`chown -R $usr $udir`;

	`/bin/EXP $pool`;

	sleep 300;
	$OP = 0;
	$YAY++;
	return 0;
}
sub rep
{
	my ($date, $clan, $name) = @_;

	open(my $rfh, '>>', "/REP/$clan");
	print $rfh "$name\n";
	close $rfh;

	return 0;
}
