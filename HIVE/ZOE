#!/usr/local/bin/perl
use strict; use warnings;
use POSIX;
##############################
# ZOE - drive mount DEMON
##############################
my $zoe = '/usr/ANONI/HIVE/FEED/norm/zoe';
# BIRTH ######################
die "FAIL STILLBORN $!\n" unless (daemon() == 0);
# GLOBAL #####################
my $NAME = name();
# /HIVE/
my $ROOT = '/usr/ANONI/HIVE/';
my $PING = $ROOT.'PING';
my $BIO = $ROOT.'BIO/'.$NAME;
my $BIOYAY = $ROOT.'BIO/'.$NAME.'_YAY';
my $BIOFAIL = $ROOT.'BIO/'.$NAME.'_FAIL';
my $TODO = $ROOT.'TODO/'.$NAME;
my $FEED = $ROOT.'FEED/';
my $POOL = '/usr/ANONI/dump/pool/';
my $G = '/usr/ANONI/dump/g/';
# attributes
my $BIRTH = age();
my $SLEEP = $TODO.'_SLEEP';
my $RATE = 100;
my $YAY = 0;
my $FAIL = 0;
# LOG ########################
my ($Lfh, $Yfh, $Ffh); 
open($Lfh, '>>', $BIO);
open($Yfh, '>>', $BIOYAY);
open($Ffh, '>>', $BIOFAIL);
$Lfh->autoflush(1);
$Yfh->autoflush(1);
$Ffh->autoflush(1);
# PREP #######################
printf $Lfh ("HELLOWORLD %s\n", TIME());
ping();
die "FAIL write pool $!\n" unless (-w $POOL);
die "FAIL write g $!\n" unless (-w $G);
die "FAIL write BIO $!\n" unless (-w $BIO);
die "FAIL write PING $!\n" unless (-w $PING);
die "FAIL write FEED $!\n" unless (-w $FEED);
# LIVE #######################
my $cnt = 0;
while (1)
{
	sleep 600;
	SLEEP($cnt, $cnt, $cnt) if (-e $SLEEP);
	next unless (-f $zoe);
	act();
	if ($cnt % $RATE == 0)
	   { tombstone($cnt, $cnt) }
	$cnt++;
}
# CORE #######################
sub name
{
	my $id = int(rand(999));
	my $name = $$.'_'.$id;
	return $name;
}
sub tombstone
{
	my ($cnt, $ttl) = @_;
	my ($tTIME, $nTIME, $life);
	$tTIME = age();
	$nTIME = TIME();
	$life = "$BIRTH $tTIME";
	print $Lfh "$nTIME demon: $NAME age: $life yay: $YAY fail: $FAIL\n";
}
sub ping
{
	my ($Pfh, $curTIME);
	open($Pfh, '>>', $PING);
	$curTIME = TIME();
	print $Pfh "$curTIME $$\n";
	close $Pfh;
}
sub age
{
	my $age = localtime();
	$age =~ s%..........20..%%;
	$age =~ s%^....%%;
	$age =~ s% %_%;
}
sub TIME
{
	my ($t, $mon, $day, $hour, $time);
	$t = localtime();
	$mon = (split(/\s+/, $t))[1];
	$day = (split(/\s+/, $t))[2];
	$hour = (split(/\s+/, $t))[3];
	$time = $mon.'_'.$day.'_'.$hour;
	return $time;
}
sub daemon
{
	my ($pid, $pid2, $fd, $des);
	die "FAIL fork 1 $!\n" unless (($pid = POSIX::fork()) == 0);
	die "FAIL child 1 $!\n" unless ($pid == 0);
	die "FAIL setsid $!\n" unless POSIX::setsid();
	die "FAIL fork 2 $!\n" unless (($pid2 = POSIX::fork()) == 0); 
	die "FAIL child 2 $!\n" unless ($pid2 == 0);
	die "FAIL chdir tmp $!\n" unless chdir('/HIVE/');
	POSIX::umask 0;	
	$fd = 3;
	do { POSIX::close($fd); $fd++; } while ($fd < 1024);
	$des = '/dev/null';
	open(STDIN, '<', $des);
	open(STDOUT, '>', $des);
	open(STDERR, '>', $des);
	return 0;
}
sub SLEEP
{
	my ($cnt, $ttl, @QUE) = @_;
	my ($Sfh, $timeout, $curTIME);
	open($Sfh, '<', $SLEEP);
	$timeout = readline $Sfh; chomp $timeout;
	$curTIME = TIME();
	print $Lfh "SLEEP $curTIME $timeout\n";	
	close $Sfh; unlink $SLEEP;
	SUICIDE($cnt, $ttl, @QUE) if ($timeout eq 'SUICIDE');
	tombstone($cnt, $ttl);
	sleep $timeout;
}
sub SUICIDE
{
	my ($cnt, $ttl, @QUE) = @_;
	my $curTIME = TIME();
	print $Lfh "FKTHEWORLD $curTIME\n";
	tombstone($cnt, $ttl);
	que_flush(@QUE);
	move($TODO, $FEED);
	die;
}
sub que_up
{
	my $qfh; my @QUE;	
	que_get();
	open($qfh, '<', $TODO);
	@QUE = readline $qfh; 
	chomp @QUE; close $qfh;
	return (@QUE);
}
sub que_get
{
	my $dh;
	opendir($dh, $FEED);
	my @ls = readdir($dh);
	shift(@ls); shift(@ls);
	my $que_path = $FEED.$ls[0];
	move($que_path, $TODO);
	print $Lfh "que: $que_path\n";
}
sub que_flush
{
	my (@QUE) = @_;
	open(my $TODOfh. '>', $TODO);
	print $TODOfh "$_\n" for (@QUE);
	close $TODOfh;	
}
sub act
{
	next unless (-f $zoe);
	my $iusr = f_own($zoe);
	camcontrol($iusr, $zoe);
}
sub camcontrol
{
	my ($usr, $file) = @_;
	my (@rootcam, @usrcam, @set, @cmd);
	my ($msg1, $msg2, $udir);

	my %fs = ( zfs => \&zfs, fat => \&fat );

	$msg1 = 'disconnect device 5min';
	$msg2 = 'available dev';
	$udir = "/usr/home/$usr/usb/";

	out($usr, $msg1);
	sleep 5;

	@rootcam = `camcontrol devlist`;
	chomp @rootcam;
	$_ =~ s%.*\(%% for @rootcam;
	$_ =~ s%,.*%% for @rootcam;

	out($usr, 'insert now');
	sleep 30;
	
	@usrcam = `camcontrol devlist`;
	chomp @usrcam;
	$_ =~ s%.*\(%% for @usrcam;
	$_ =~ s%,.*%% for @usrcam;

	@set = uniq(\@rootcam, \@usrcam);

	$msg2 .= " dev=$_" for @set;
	
	my @imp = `zpool import`;
	chomp @imp;
	if (defined $imp[0])
	{
		$imp[0] =~ s%.*pool: %%;
		$msg2 .= " zfs=$imp[0]";
	}
	out($usr, $msg2);

	sleep 5;
	my @c = slurp($file);
	chomp @c;
	my @cmds = split(" ", $c[0]);
	$fs{$cmds[0]}->($cmds[1], $usr, $udir);

	out($usr, 'usb mounted');
	$YAY++;

	unlink $zoe;
}
sub out
{
	my ($usr, $msg) = @_;

	my @who = `who | awk '{print \$1" "\$2}'`;
	chomp @who;
	
	for (@who)
	{
		my @cmd = split(" ", $_);
		next unless ($cmd[0] eq $usr);
		`echo $msg > /dev/$cmd[1]`;
	}
}
sub f_own 
{
	my ($file) = @_;
	my $owner = `ls -l $file |  awk '{print \$3}'`;
	chomp $owner;
	return $owner;
}
sub uniq
{
	my ($ref1, $ref2) = @_;
	my %master;
	my (@set, @one, @two);
	@one = @{$ref1};
	@two = @{$ref2};

	%master = map{$_ => undef} @one;

	for (@two)
	{
		next if (exists $master{$_});
		push(@set,$_);
	}
	return @set;
}
sub slurp 
{
	my $file = shift;

	open(my $subfh, '<', $file);
	my @slurp = readline $subfh;
	close $subfh; chomp @slurp;

	return @slurp;
}
sub zfs
{
	my ($pool, $usr, $udir) = @_;
	my %zup;
	my @zarr;
	$udir =~ s%/\z%%;

	`zpool import -f -o altroot=$udir $pool`;
	@zarr = z_act();
	for (@zarr)
	{
		last if ($_ eq $pool); 
	}
	`chmod -R 700 $udir`;

	`chown -R $usr $udir`;
	return 0;
}
sub fat
{
	my ($dev, $usr, $udir) = @_;
	$udir =~ s%/\z%%;

	my $er = 'FAIL $dev invalid';
	out($usr, $er) unless (-e "/dev/$dev");
	`mount -t msdosfs /dev/$dev $udir`;
	opendir(my $tdh, $udir) or return 1;
	close $tdh;

	`chmod -R 700 $udir`;
	`chown -R $usr $udir`;
	
	return 0;
}
sub z_act
{
	my (@pool, @active);
	@pool = `zfs list`;
	chomp @pool;
	
	for (@pool)
	{
		push (@active, $_) if (/pool/);
	}

	chomp @active;
	return @active;
}
sub rep
{
	my ($date, $clan, $name) = @_;

	open(my $rfh, '>>', "/REP/$clan");
	print $rfh "$name\n";
	close $rfh;

	return 0;
}
