###################################
# MKRX   - network unix clones
#                              to0j
###################################
# INTRO ###########################
journey to the land of unix
experience C & shell & perl 

ways of deep-sea secrets  
raw-power of binary logic

this ordeal 
reward 1337

hard for all
way to wizard

are you
ready to go?
###################################
README guides step-by-step
know nothing & learn much
simple uniform-standardization
encourage plain-understanding 
prove for oneself 
truth if anonymous
# OVERVIEW ########################
get a common AMD64-machine 
remake machine via README into a unix node
attach node to a peer-2-peer encrypted-network

all connections encrypted via single-use-keys
such keys:
  - prevent replay attacks from man-in-the-middle
  - man-in-the-middle can't know if a user is privledged or normal
  - user account deleted after first-access to leave-no-trace
  - traded amongst network users to share access to hosts 
  - gain value relative to other nodes to be exchanged as currency

services offered:
  - bounce traffic to obfuscate user-physical-location
  - send/receive messages
  - send/receive files
  - proxy wifi-device traffic to circumvent user-tracking
# REQUIREMENT #####################
AMD64-machine
usb installer (freeBSD.10-3.AMD64.memstick.img)
usb INIT (zfs formated usb with install-data)
usb-to-be-wiped (optional process to create INIT usb)
# LAYERS #########################
    HARDWARE_LAYER   : 
       mobo cpu mem drive psu montior keyboard
       library of raw actions to AMD64 cpu
    SOFTWARE_LAYER   : 
       FreeBSD unix kernel 
       mechanisation of actions to HARDWARE_LAYER
       system-enviornment
    INTERFACE_LAYER : 
       c-libraries 
       perl-libraries
       permission-based access to SOFTWARE_LAYER
       usr interactions with system-enviornment via shell
    NETWORK_LAYER   : 
       IPv4 ethernet & wifi end-points
       direct-encrypted-tunnels amongst IPv4 connected-nodes
       traffic-relay from node to various nodes to obfuscate traffic-origin
           ex: {usr}->ANONI_A -> ANONI_D -> ANONI_J -> sleep 
               ANONI_J -> ANONI_F -> ANONI_V -> sleep -> {action} 
# USERS ###########################
con    
   physical-host console user
   usb device end-point
norm
   ssh jail user
   normal jail access to system
heir
   ssh jail user
   only way to access host 
lord 
   can only access via ssh jail heir
   host super-user-group
   each lord responsible for a section of the system
# ROOT ############################
only one way to total-control root a computer
   heir $KEY -> ssh ANONI heir 
   ANONI heir -> RABBIT $KEY -> ssh host RABBIT -> su root 
# TERMS ###########################
OTOPSK - one time only pre shared key
RABBIT - alarm authenticated-wheel hole to host root
ANONI  - external-anonymous access shell interface
WORLD  - unix nfs CLAN user filesystem
CLAN   - unix-groups allow persistent data accross ANONI sessions
PF_NET - network IPv4 connection lists
NODE   - individual machine on network
CENSUS - network file indexes of location
META   - meta-data index arrays 
man-in-the-middle - entity intercepts traffic between two nodes
# USB #############################
BANK
   PF_NET
   CLAN 
   host/	
      $host/ 
         $grp/    
            $usr/ p id_rsa.pub id_rsa 
KERN
   README
   bin/
		host programs
   jbin/
		jail programs
   conf/
		host conf files
   jconf/
		jail conf files
   HIVE/
		DEMON code
   install/
	        host install proceedure
   jinstall/
		jail install proceedure
META
   NAM
   PAT
   SIZ
   ENC
LOG
   misc/
   CENSUS 
      NODE/
# BEGIN ###########################
discover if computer supports AMD64
keyboard F1-F12 are computer-unique hot-keys
one hot-key will drop you into BIOS
hot-key only works during first-few-moments of boot
power-one machine
wait to see if BIOS will display a banner
banner will display mobo manufacturer & correct hot-key
or just spam F-keys to find correct hot-key
drop to BIOS
BIOS will reveal machine cpu
look for boot options
select usb device to boot first
curiousity & relentlessness rewards answer
trial & error is the action of the hacker
when configuration of BIOS is believed to be correct
do not press hot-key & hope 
correct if freeBSD demon is displayed after during boot
# IMPORTANT #######################
%    - command typed into terminal
//// - comment on action to take
>>>> - example command
CAPS - item a variable learnt from prior-step
# INSTALL PROCEEDURE ##############
#### set bios boot from usb
#### boot FreeBSD-install-memstick
#### select Shell
% camcontrol devlist
#### this cmd returns all storage-devices
#### find storage-device & USB to over-write 
#### HOST = hostname (user created name of computer)
#### DRIVE = storage-device 
#### USB   = usb-device
#### INIT = name of INIT USB
#### NAME = think
#### INIT = name of INIT USB
#### ALFADATE = alffabet name
#### be sure only drive attached to computer (hdd/ssd)
% camcontrol devlist
//// find DRIVE name 
//// ada0 usually the drive; da0 usually the usb
% dd if=/dev/zero of=/dev/DRIVE bs=1M
   >>>> if=/dev/zero of=/dev/ada1 bs=1M
//// let it finish
# OPTIONAL USB CREATE #############
#### insert usb-to-be-wiped

% camcontrol devlist

#### find new entry 
#### in doubt, unplug usb & run command again to find new-entry 
#### replace USB with device name
//// ada# usually the drive; da1 usually the usb

% dd if=/dev/zero of=/dev/USB bs=1M
   >>>> if=/dev/zero of=/dev/da1 bs=1M

#### let it finish
% zpool create NAME /dev/USB
//// connect INIT (usb with install data)
% zpool import INIT 
% zfs snapshot INIT/KERN@ALFADATE

% zfs send INIT/KERN@ALFADATE | zfs recv NAME/KERN

% zfs create NAME/BANK
% zfs create NAME/LOG
% zfs create NAME/META

% mkdir /NAME/LOG/misc
% mkdir /NAME/BANK/HOST/
% cp /INIT/BANK/pf_net /NAME/BANK/pf_net

% zfs snapshot NAME/KERN@ALPHADATE
% zpool export NAME
# CONTINUE MANDATORY STEPS ########
% exit
#### select Install
#### select Select

#### hostname 
% HOST

#### tick options via spacebar 
#### only have tick: doc src

#### select Auto (ZFS)
#### select Select (Install Proceed with Installation)
#### select stripe

#### tick DRIVE
#### select YES

#### set root password as root
% root
% root

#### select Cancel
#### select NO
#### whatever
#### whatever
#### select YES

#### only tick dumpdev

#### select NO
#### select exit
#### select YES
% zpool import -f INIT
% cp /INIT/KERN/conf/rc.conf /etc/
% zpool export INIT
//// unplug INIT usb
% reboot 
# --- REBOOT ---
# GENERIC_WORLD ###################
% zpool import -f INIT
% cd /INIT/KERN/install/
% /bin/sh /INIT/KERN/install/1.INIT
% perl /INIT/KERN/install/2.PORT /INIT
% perl /INIT/KERN/install/3.WORLD /INIT node
% ifconfig
//// ifconfig will report network-interfaces
//// INT = interface
//// interface{ em0,re0,... }
//// IP4 = #.#.#.#
//// IP4 are four numbers seperated by '.'
   >>>> inet 123.123.12.113
% vim /etc/rc.conf
//// set INT
//// set IP4 
% vim /etc/pf.conf
//// set INT
//// set IP4 
% vim /etc/jail.conf 
//// set INT
% vim /etc/pf_net
//// add a new entry on a new line
//// type only IP4 no spaces
% rm -r /usr/obj
% cd /usr/src/
% make -j2 buildkernel KERNCONF=KERN
% make installkernel KERNCONF=KERN
% rm -r /usr/obj
% make -j2 buildworld
# CUSTOM_WORLD ####################
% make installworld
% make installworld DESTDIR=/usr/ANONI
% make distribution DESTDIR=/usr/ANONI
% cp -R /usr/local/ /usr/ANONI/usr/local/
% zpool export INIT
# SHADOW_WORLD ####################
% zpool import -o altroot=/usr/ANONI/mnt INIT
% jail -c anoni
% jls
//// verify the jail is has the number 1
% jexec 1 /bin/csh
% perl /mnt/INIT/KERN/jinstall/1.WORLD /INIT
% perl /mnt/INIT/KERN/jinstall/2.ANONI /INIT HOST 
% vim rc.conf
//// assign IP4 address
% exit
% zpool export INIT 
//// unplug INIT
% reboot
# --- REBOOT ---
# NORM_WORLD ######################
##### login as con
##### pass: con
# RABBIT_HOLE #####################
#### plug in INIT usb
% con@node /~$ echo 'con INIT HOST wheel' > ~/ted
% con@node /~$ cp ~/ted /usr/ANONI/HIVE/FEED/norm/ 
#### wait for demon to wake up around 10 min
#### DEMON will mount usb and create a key-dir in home ~/
% con@node /~$ cd 
#### $KEY = dir name of remote usr
#### IP4 is the ip4 of host
% cp $KEY/id_rsa ~/.ssh/
############### % chmod -R 700 ~/    DEMON todo
% c
% ifconfig
% cat $KEY/p
% ssh $KEY@IP4
   >>>> ssh 632@1.0.1.2
#### type contents of p with no spaces
//// verify ssh via IP4 change
% ifconfig
% su
#### pass = root
---- RABBIT ----
% root@node /root$ perl usb/KERN/install/4.POSTJAIL
% root@node /root$ perl usb/KERN/install/5.MAP
% root@node /root$ echo 'your_initator_manifest' >> /etc/motd
% reboot
# --- REBOOT ---
# MAP #############################
/root/         warren
/bin/
/sbin/
/etc/
/tmp/
/CLAN/         clan REP
/KRIP/         pools of unassigned $KEY
/KRIP/norm     mined $KEY named after sha256
/KRIP/lord     mined $KEY named after sha256
/KRIP/pass     pass named after sha256
/usr/home/     lord home dir
/usr/pool/      scp
/usr/ANONI/
/usr/ANONI/HIVE/
/usr/ANONI/nfs/     
/usr/ANONI/LIST/      file lists
/usr/ANONI/src/       system source
# TODO ############################
BRICK: logs clans config
MORSE: ping-updates
bin/ROTATE
tmux
pedrk
create zroot bootable flash
sub krip network harvest pools
pedrk httpd
http -> ssh
10 mobo/cpu sets
kickstarter
4 spray painted sets
usb-flash
ntp
KERN
start.if
src.conf
login.conf
CLAN
devfs ruleset host/jail
chmod / general hardening
ports / mods
# REP #############################
/CLAN/pool/ - host file pool 
/CLAN/src/  - host system src 
/CLAN/log/  - host log 
append-only clan files 
line { sha256 timestamp location clan }

usr enhances code
places it for upload
all sys REP++ CLAN
owner file in src

usr tips ED to scrape
digest of all files
concatenate CLAN repfile
if unique $KEY rewarded

clan notary: log, file-index, TXN-witness
retrace simple if subsequent review flag-bad 

network verify & index
relative $KEY dividend
REP++ CLAN monthly
CLAN TXN REP for zfs quota increase
CLAN TXN REP new clan
$KEY distributed in clan chests
	usr -> con -> ssh node -> clan -> chest -> BANK_ID
	BANK -> $KEY -> tunnels -> BANK_ID -> usb
# LINK ############################
new_node KIKE {clan} -> node_x KIKE
node_x -> add_clan add_xclan -> $KEY deposit
# PVP #############################
pvp - process vs process
	kill9 nukes, nice-hits, node-black-list
# SSH #############################
shell
scp time-limited resume
p2p tunnels
reverse-shell
firewall-hole
# CHRON ###########################
10day - overwrite accessed users
      - 10 jails rotated per day
      - 100k $KEY in 10 day
      - $KEY buyback
day   - uninterrupted service
      - specific-access only
      - $KEY for certain day
work  - hours shell alive
# PATIENCE ########################
DEMON need much sleep
actions take time
harvest emphasis 
multi-terminal emphasis
# AUTHENTICATION  #################
pass       : root
pass       : con
OTOPSK     : scp norm
		BANK-XFR
OTOPSK & printed-pass : lord heir
		USB-XFR
# HIVE ############################
TED  - console $KEY shift
CAM  - archivist 
IRO  - get
WUF  - wakeup
XEN - krip

    - file digest
    - proxy
    - tar
    - nmap
SAM    - p2p $KEY tunnels 
BOB    - chron jail rotate
TST    - usr trials
VEN    - host cleanup

