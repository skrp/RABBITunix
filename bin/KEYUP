#!/usr/local/bin/perl
use strict; use warnings;
use File::Copy;
###########################
# WORLD - host buildworld 
###########################
my ($usb, $node, $start, $end) = @ARGV;
die "ARG1 /usb ARG2 node ARG3 start ARG4 end\n" unless (defined $end);
$usb =~ s%/\z%%;
# PASSBUTTON ##############
my @p = qw(0 . 1 2 3 4 5 6 + 7 8 9 / * - q w e r a s d f z x c v);
my @list = $start..$end;
my $shell = '/bin/csh';
my @grp = qw(wheel clan rep world pf zfs usb hive src);
############################
mkdir "/root/grp/" unless (-d "/root/grp/");
for (@grp)
  { `touch /root/grp/$_` unless (-e "/root/grp/$_" ); }
############################
cr_home($_) for (@list);
cr_usr($_) for (@list);
############################
sub cr_home
{
	my ($usr) = @_;
############################
	my $home = "/usr/home/$usr/";
	mkdir $home;
############################
	#copy($home, "$usb/KERN/conf/.vimrc $home");
	my $ssh = $home.'.ssh/';
	mkdir("$ssh");
	`chown -R $usr $ssh`;
############################
	copy("$usb/KERN/conf/.cshrc","$home");
	print "$home\n";
}
############################
sub cr_usr
{
	my ($usr) = @_;
	my $home = "/usr/home/$usr/";
	`pw useradd -n $usr -d $home -s $shell`;
	`chmod -R 700 $home`;
	`chown -R $usr $home`;
	
	my $grp = grp();
	`pw usermod -n $usr -G $grp`;
	`echo '$usr' >> /root/grp/$grp`; 
	print "$usr created\n";
############################
	`chmod -R 700 $home.ssh`;

	cr_key($usr, $node, $grp);
}
############################
sub cr_key
{
	my ($iusr, $node, $igrp) = @_;

	my $idump = $usb."/BANK/host/$node/$igrp/$iusr";
	my $key = "/usr/home/$iusr/.ssh/id_rsa";
	my $pub = $key.'.pub';

	`mkdir -p $idump`;
	my @pass = neopass();

	`ssh-keygen -q -N "$pass[0]" -t rsa -b 2048 -f $key`;

	move($key, "$idump/id_rsa");
	copy($pub, "$idump/known_hosts");
	move($pub, "/usr/home/$iusr/.ssh/authorized_keys");
	`echo "$pass[1]" > $idump/p`;

	print "$key created\n";
############################
}
sub grp
{
	my $rnum = `jot -r 1 0 8`;
	my $grp = $grp[$rnum];
	return $grp;
}
sub neopass
{
	my @pass;
	my $cnt2 = 0;

	while ($cnt2 < 4)
	{
		my @set = `jot -r 5 0 26`;
		chomp @set;
		for (@set)
		{
			no warnings 'uninitialized';	
			$pass[0] .= $p[$_];
			$pass[1] .= $p[$_];
		}
		$cnt2++;
		$pass[1] .= ' ';
	}

	chop $pass[1];
	return @pass;
}
